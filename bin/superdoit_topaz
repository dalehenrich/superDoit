#! /usr/bin/env bash
#
#	Expected script command line:
#		using $GS_HOME
#			script  <stone-name> ( -L | -l | -r ) [ <topaz-command-line-args> ]
#		using $ARCHBASE or $GEMSTONE
#			script -I <topazini-path> ( -L | -l | -r ) [ <topaz-command-line-args> ]
#
#	Not worried about duplicate topaz options at this point ... let the cards fall where they may
#

set -e

export SUPERDOIT_CURRENT_DIR="`pwd`"
export SUPERDOIT_DIR="`dirname $0`/.."

# process command line args
#		collect scriptFile, then scan for scriptArgs, if -- encountered, 

scriptFile=$1
shift

usingARCHBASE="false"
usingGS_HOME="false"
usingGEMSTONE="false"
if [ -f ".GDKStoneSpec.ston" ] && [ -d "product" ]; then
	# support GsDevKit_stones
	export GEMSTONE="`pwd`/product"
fi
if [ "$GS_HOME"x != "x" ] ; then
	usingGS_HOME="true"
elif [ "$ARCHBASE"x != "x" ] ; then
	usingARCHBASE="true"
elif [ "$GEMSTONE"x != "x" ] ; then
	usingGEMSTONE="true"
else
	echo "One environment variable of ARCHBASE, GS_HOME, or GEMSTONE must be defined"
	exit 1
fi

for arg in "$@"; do
		if [ "$usingGS_HOME" = "true" ] ; then
			if [ "$stoneName"x = "x" ] ; then
				stoneName=$arg
			else
				topazArgs="$topazArgs $arg"
			fi
		else
			topazArgs="$topazArgs $arg"
		fi
		shift
done

if [ "$usingGS_HOME" = "true" ] ; then
	if [ "$stoneName"x = "x" ] ; then
		# expect current directory to be a stone directory
		currentDir=`pwd`
		stoneName="`basename $currentDir`"
		export SUPERDOIT_STONE_DIR=$GS_HOME/server/stones/$stoneName
		if [ ! -d "$SUPERDOIT_STONE_DIR" ] ; then
			>&2 echo "No stone name specified on the command line AND the current directory"
			>&2 echo "$SUPERDOIT_STONE_DIR is NOT a \$GS_HOME stone directory."
			>&2 echo "---"
			>&2 echo "run the script in a proper \$GS_HOME stone directory or specify the stone-name:"
			>&2 echo "  Usage: script [ <script-args> ] [ -- [ <stone-name> [ <topaz-command-line-args> ] ] ]"
			exit 1
		fi
	else
		export SUPERDOIT_STONE_DIR=$GS_HOME/server/stones/$stoneName
		if [ ! -d "$SUPERDOIT_STONE_DIR" ] ; then
			>&2 echo "The stone name $stoneName is not the name of an existing stone:"
			>&2 echo "	$SUPERDOIT_STONE_DIR is NOT a valid \$GS_HOME/server/stones stone directory."
			>&2 echo "---"
			>&2 echo "run the script in a proper \$GS_HOME stone directory or specify the stone-name:"
			>&2 echo "  Usage: script [ <script-args> ] [ -- [ <stone-name> [ <topaz-command-line-args> ] ] ]"
			exit 1
		fi
	fi
	# set up GsDevKit_home stone environment
	pushd "$SUPERDOIT_STONE_DIR" >& /dev/null
 	 source "$SUPERDOIT_STONE_DIR/stone.env"
	popd >& /dev/null

	if [ "$GEMSTONE"x = "x" ] ; then
		export GEMSTONE="$SUPERDOIT_STONE_DIR/product"
	fi

	if [ "$ROWAN_PROJECTS_HOME"x = "x" ] ; then
		export ROWAN_PROJECTS_HOME="$GS_HOME/shared/repos"
	fi
	topaziniArgs="-I $SUPERDOIT_STONE_DIR/.topazini"
fi

skip="skip"
if [ "$skip"x = "x" ] ; then
	echo "======================"
	echo "script file: $scriptFile"
	echo "stone name: $stoneName"
	echo "topaz args: $topazArgs"
	echo "script args: $scriptArgs"
	echo "======================"
	# exit 0
fi

vers=`awk 'NR==2{print $1; exit}' $GEMSTONE/version.txt`
case $vers in
	3.5.*|3.6.*|3.7.*)
		$GEMSTONE/bin/topaz $defaultTopazArgs $topazArgs $topaziniArgs \
			-S $scriptFile
		;;
	*)
		$GEMSTONE/bin/topaz -q $defaultTopazArgs $topazArgs $topaziniArgs << EOF
			input $scriptFile
EOF
		;;
esac
