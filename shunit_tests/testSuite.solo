#! /usr/bin/env bash

echo ==================
echo testExamples.solo
echo ==================

PATH=${GITHUB_WORKSPACE}/tests:$PATH

test_argsDict_solo() {
	resultFile=`mktemp`

	argsDict.solo --must=must > $resultFile
	diff $resultFile ${GITHUB_WORKSPACE}/tests/expected/${SOLO_GEMSTONE_VERSION}/argsDict_1.ston

	argsDict.solo --must=123 --required=required > $resultFile
	diff $resultFile ${GITHUB_WORKSPACE}/tests/expected/${SOLO_GEMSTONE_VERSION}/argsDict_2.ston

	argsDict.solo --must=123 -a required > $resultFile
	diff $resultFile ${GITHUB_WORKSPACE}/tests/expected/${SOLO_GEMSTONE_VERSION}/argsDict_3.ston

	argsDict.solo 456 --must=123 780 > $resultFile
	diff $resultFile ${GITHUB_WORKSPACE}/tests/expected/${SOLO_GEMSTONE_VERSION}/argsDict_4.ston
}

test_testInput_solo() {
	resultFile=`mktemp`

	testInput.solo > $resultFile
	diff $resultFile ${GITHUB_WORKSPACE}/tests/expected/${SOLO_GEMSTONE_VERSION}/testInput_1.ston

}

test_testArgsDict_solo() {
	resultFile=`mktemp`

	testArgsDict.solo > $resultFile
	diff $resultFile ${GITHUB_WORKSPACE}/tests/expected/${SOLO_GEMSTONE_VERSION}/testArgsDict_1.ston

}

test_testInstVars_solo() {

	foo=`testInstVars.solo foo`
	echo "$foo"
	assertEquals "expect 'foo'" "'foo'" "${foo}"
}

test_testEnsureBlock_solo() {
	resultFile=`mktemp`
	stackFile=`mktemp`

	testEnsureBlock.solo 1> $stackFile 2> $resultFile
	exitStatus=$?
	assertEquals "expected exit status to be <1> not <${exitStatus}>" ${exitStatus} 1
	diff $resultFile ${GITHUB_WORKSPACE}/tests/expected/${SOLO_GEMSTONE_VERSION}/testEnsureBlock.ston	
}

. shunit_tests/shunit2-2.1.8/shunit2_test_helpers
. shunit_tests/shunit2-2.1.8/shunit2

echo ==================
echo DONE testExamples.solo
echo ==================
